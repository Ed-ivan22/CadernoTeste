import streamlit as st

# --- Dados das Quest√µes ---
questoes_prova = [
    {
        "pergunta": "Qual a capital do Brasil?",
        "opcoes": ["Rio de Janeiro", "S√£o Paulo", "Bras√≠lia", "Belo Horizonte"],
        "resposta_correta_index": 2
    },
    {
        "pergunta": "Quem escreveu 'Dom Quixote'?",
        "opcoes": ["William Shakespeare", "Miguel de Cervantes", "Machado de Assis", "Gabriel Garc√≠a M√°rquez"],
        "resposta_correta_index": 1
    },
    {
        "pergunta": "Quantos continentes existem no mundo?",
        "opcoes": ["5", "6", "7", "4"],
        "resposta_correta_index": 2
    },
    {
        "pergunta": "Qual o maior oceano do mundo?",
        "opcoes": ["Oceano Atl√¢ntico", "Oceano √çndico", "Oceano √Årtico", "Oceano Pac√≠fico"],
        "resposta_correta_index": 3
    },
    {
        "pergunta": "Qual o animal mais r√°pido do mundo?",
        "opcoes": ["Guepardo", "Falc√£o Peregrino", "Le√£o", "Ant√≠lope"],
        "resposta_correta_index": 1
    },
    {
        "pergunta": "Qual elemento qu√≠mico √© simbolizado por 'Au'?",
        "opcoes": ["Prata", "Cobre", "Ouro", "Alum√≠nio"],
        "resposta_correta_index": 2
    },
    {
        "pergunta": "Em que ano o homem pisou na Lua pela primeira vez?",
        "opcoes": ["1959", "1969", "1979", "1989"],
        "resposta_correta_index": 1
    },
    {
        "pergunta": "Qual o pa√≠s com a maior popula√ß√£o do mundo (aproximadamente em 2024)?",
        "opcoes": ["Estados Unidos", "China", "√çndia", "Indon√©sia"],
        "resposta_correta_index": 2
    },
    {
        "pergunta": "Qual a cor prim√°ria que falta: Azul, Amarelo, ___?",
        "opcoes": ["Verde", "Laranja", "Vermelho", "Roxo"],
        "resposta_correta_index": 2
    },
    {
        "pergunta": "Qual o maior planeta do nosso Sistema Solar?",
        "opcoes": ["Marte", "Terra", "J√∫piter", "Saturno"],
        "resposta_correta_index": 2
    }
]

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(layout="centered", page_title="Caderno de Provas")
st.title("üìö Caderno de Provas MVP")
st.markdown("---")

# --- Inicializa o estado da sess√£o ---
# 'quiz_submetido' controla quando os resultados devem ser mostrados
if 'quiz_submetido' not in st.session_state:
    st.session_state.quiz_submetido = False

# 'respostas_selecionadas' ir√° armazenar o VALOR da op√ß√£o escolhida pelo usu√°rio para cada r√°dio-bot√£o
# A chave de cada r√°dio-bot√£o ser√° 'q_0', 'q_1', etc. e seu valor ser√° a op√ß√£o selecionada.
# N√£o precisamos de um dicion√°rio aninhado para isso.
# O Streamlit armazena automaticamente o valor de um widget em st.session_state[key]
# se uma 'key' for fornecida.

# --- Exibir as Quest√µes ---
st.subheader("Responda √†s quest√µes abaixo:")

# Itera sobre as quest√µes para criar a interface de r√°dio-bot√µes
for i, questao in enumerate(questoes_prova):
    st.markdown(f"**{i+1}. {questao['pergunta']}**")
    
    # Pega o VALOR da resposta que o usu√°rio selecionou anteriormente para esta quest√£o (se houver)
    # Isso √© crucial para que o st.radio mantenha a sele√ß√£o ap√≥s um re-run (como o clique no bot√£o Responder)
    resposta_previa_valor = st.session_state.get(f'q_{i}')
    
    # Encontra o √≠ndice da resposta pr√©via na lista de op√ß√µes para pr√©-selecionar o r√°dio-bot√£o
    initial_index = None
    if resposta_previa_valor in questao['opcoes']:
        initial_index = questao['opcoes'].index(resposta_previa_valor)

    # Cria o r√°dio-bot√£o para a quest√£o atual
    # O 'key' √© fundamental para que o Streamlit salve e recupere o estado de cada widget individual
    st.radio(
        label=f"Op√ß√µes da Quest√£o {i+1}", # Label interno que pode ser escondido
        options=questao['opcoes'],
        index=initial_index, # Define qual op√ß√£o estar√° selecionada inicialmente (do estado anterior)
        key=f'q_{i}', # Chave √∫nica para este r√°dio-bot√£o no st.session_state
        label_visibility="collapsed" # Esconde o label para n√£o duplicar com o markdown da pergunta
    )
    st.markdown("---") # Divisor visual

# --- Bot√£o Responder ---
# Quando este bot√£o √© clicado, ele altera o estado 'quiz_submetido' para True
# e for√ßa uma nova execu√ß√£o do script para mostrar os resultados.
if st.button("Responder Prova", type="primary", use_container_width=True):
    st.session_state.quiz_submetido = True
    st.balloons() # Pequena anima√ß√£o de bal√µes!
    # st.rerun() # Opcional: pode ser omitido se o c√≥digo abaixo j√° for renderizado condicionalmente
    #              mas ajuda a garantir que a tela de resultados apare√ßa "na hora".

# --- Exibir Resultados (apenas se o quiz foi submetido) ---
if st.session_state.quiz_submetido:
    st.markdown("## ‚úÖ Gabarito e Suas Respostas")
    st.info("Sua pontua√ß√£o e o gabarito detalhado est√£o abaixo.")
    
    pontuacao = 0
    
    for i, questao in enumerate(questoes_prova):
        pergunta = questao['pergunta']
        opcoes = questao['opcoes']
        resposta_correta_index = questao['resposta_correta_index']
        resposta_correta_texto = opcoes[resposta_correta_index]
        
        # Obt√©m a resposta do usu√°rio diretamente do st.session_state usando a chave do widget
        # Se o usu√°rio n√£o selecionou nada, o valor ser√° None
        resposta_usuario_selecionada = st.session_state.get(f'q_{i}')
        
        st.markdown(f"### {i+1}. {pergunta}")
        
        # Encontra o √≠ndice da resposta selecionada pelo usu√°rio nas op√ß√µes da quest√£o
        indice_usuario = -1 # Valor padr√£o se nada for selecionado ou valor inv√°lido
        if resposta_usuario_selecionada in opcoes:
            indice_usuario = opcoes.index(resposta_usuario_selecionada)

        # Exibir op√ß√µes e destacar a correta e a do usu√°rio
        for j, opcao in enumerate(opcoes):
            if j == resposta_correta_index:
                # Resposta correta
                st.markdown(f"- **<span style='color: green;'>{opcao} (Correta)</span>**", unsafe_allow_html=True)
            elif j == indice_usuario and j != resposta_correta_index:
                # Resposta do usu√°rio, se estiver errada
                st.markdown(f"- <span style='color: red;'>{opcao} (Sua Resposta Incorreta)</span>", unsafe_allow_html=True)
            else:
                # Outras op√ß√µes n√£o selecionadas ou incorretas
                st.write(f"- {opcao}")
        
        # Feedback de acerto ou erro para cada quest√£o
        if indice_usuario == resposta_correta_index:
            pontuacao += 1
            st.success("‚úÖ Voc√™ acertou!")
        else:
            if resposta_usuario_selecionada is not None: # Verifica se algo foi selecionado, mesmo que errado
                st.error(f"‚ùå Voc√™ errou. Sua resposta: '{resposta_usuario_selecionada}'")
            else:
                st.warning("‚ùì Voc√™ n√£o respondeu a esta quest√£o.")
        st.markdown("---") # Divisor ap√≥s cada quest√£o no resultado

    st.markdown(f"## Sua Pontua√ß√£o Final: {pontuacao} de {len(questoes_prova)}")
    if pontuacao == len(questoes_prova):
        st.snow() # Neve para pontua√ß√£o perfeita! (Ou st.balloons() novamente)
        st.success("üéâ Parab√©ns! Voc√™ acertou todas as quest√µes!")
    elif pontuacao >= len(questoes_prova) / 2:
        st.info("üëç Bom trabalho! Voc√™ se saiu bem.")
    else:
        st.error("üòî Continue estudando! H√° espa√ßo para melhorias.")

    # Bot√£o para refazer o quiz
    if st.button("Refazer a Prova", type="secondary", use_container_width=True):
        st.session_state.quiz_submetido = False
        # N√£o precisamos limpar as respostas explicitamente aqui,
        # pois cada st.radio ser√° re-inicializado com `index=None` por padr√£o
        # na pr√≥xima execu√ß√£o se n√£o houver um `st.session_state[key]` pr√©vio.
        # No entanto, se o `index` for explicitamente lido e aplicado,
        # limpar o estado das respostas pode ser √∫til para um "reset completo".
        # Para garantir que as op√ß√µes n√£o venham pre-selecionadas na pr√≥xima rodada:
        for i in range(len(questoes_prova)):
            if f'q_{i}' in st.session_state:
                del st.session_state[f'q_{i}']
        st.rerun() # Reinicia a p√°gina para o estado inicial sem as respostas submetidas